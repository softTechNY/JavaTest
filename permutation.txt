  public static Set<String> permutationFinder(String str) {
            Set<String> perm = new HashSet<String>();
            //Handling error scenarios
            if(str == null) {
                return null;
            } else if(str.length() == 0){
                perm.add("");
                return perm;

            }
            char initial = str.charAt(0); //first character
            String rem = str.substring(1); // full string without first character
            Set<String> words = permutationFinder(rem);
            for (String strNew : words) {
                for (int i =0; i<=strNew.length(); i++) {
                    perm.add(charInsert(strNew, initial, i));
                }
            }
            return perm;
        }

    public static String charInsert(String str, char c, int j){
        String begin = str.substring(0, j);
        String end = str.substring(j);
        return  begin + c + end;
    }

    public static void main(String[] args) {
        String s1 = "ABC";
        String s2 = "dhaka";
        String s3 = "MORE";
        String s4 = "HOME";

        System.out.println("\nPermutations for " + s1 + " are: \n" +
                permutationFinder(s1));


        System.out.println("\nPermutations for " + s2 + " are: \n" +
                permutationFinder(s2));


        System.out.println("\nPermutations for " + s3 + " are: \n" +
                permutationFinder(s3));


        System.out.println("\nPermutations for " + s4 + " are: \n" +
                permutationFinder(s4));


